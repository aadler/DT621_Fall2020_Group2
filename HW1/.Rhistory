baseData <- dbGetQuery(adl_cxn,
'SELECT * FROM workforce_adl.dbo.WFM_ACTUAL_DAILY_CNT WHERE CURRENT_IND = \'1\' AND PROCESS_ID <> \'0\'')
# formatting of base data
df <- inner_join(baseData, processDesc, by=c('PROCESS_ID'= 'PROCESS_ID')) %>%
mutate(RECEIPTS = ifelse(ACTUAL_VALUE < 0, 0, ACTUAL_VALUE),
WEEKDAY = weekdays(as.Date(DATE_ID)),
WEEKEND = ifelse(WEEKDAY == 'Saturday' | WEEKDAY == 'Sunday', 'Weekend','Weekday'),
frmtDt = as.Date(DATE_ID),
frmtPrcs = as.character(PROCESS_ID)) %>%
select(DATE_ID = frmtDt,
WEEKDAY,
WEEKEND,
PROCESS_ID = frmtPrcs,
PROCESS_DESC,
RECEIPTS) %>%
arrange(PROCESS_ID, DATE_ID)
##### pred results
factInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_FACT') %>%
select(MODEL_KEY, MODEL_ALG, NOTE)
metricInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_METRICS')
predInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_PREDICTIONS')
preds <- left_join(
left_join(df, predInfo, by=c('PROCESS_ID' = 'PROCESS_ID', 'DATE_ID' = 'ds')),
factInfo, by=c('MODEL_KEY' = 'MODEL_KEY')) %>%
mutate(MODEL_DESC = paste0(MODEL_ALG, ' - ', NOTE))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("WFM Receipt Data"),
selectInput(inputId = "process_desc",
label = "  Choose a Process:",
choices = unique(df$PROCESS_DESC),
selectize=FALSE,
width = '60%'),
br(),
#uiOutput("process_id"),
span(textOutput("process_id"), style="font-size:18px; color:blue"),
br(),
plotlyOutput(outputId = "distPlot"),
br(),
#dataTableOutput("summary"),
selectInput(inputId = "model",
label = "  Choose a Model:",
choices = unique(preds$MODEL_DESC),
selectize=FALSE,
width = '60%'),
br(),
plotlyOutput(outputId = "errorPlot")
)
################################# server
server <- function(input, output, ...) {
###### process id
output$process_id <- renderText( #renderUi
paste0('Process ID: ', toString(df %>%
filter(PROCESS_DESC == input$process_desc) %>%
select(PROCESS_ID) %>%
distinct())))
###### plot - errors
output$errorPlot <- renderPlotly({
errorData <- preds %>%
filter(PROCESS_DESC == input$process_desc & MODEL_DESC == input$model & !is.na(PREDICTED)) %>%
select(DATE_ID,PREDICTED, ACTUAL, ITERATION) %>%
gather(key, value, -DATE_ID, -ITERATION)
fig <- plot_ly(data = errorData,
x = ~DATE_ID, y = ~value,
type = 'scatter',
mode = 'lines',
color = ~key,
colors = c("black", "orange3"))
fig %>% layout(title = paste0("Errors for model: ", input$model),
xaxis = list(title = "Date"),
yaxis = list (title = "Value"))
})
###### plot - data
output$distPlot <- renderPlotly({
fig <- plot_ly(data = df %>% filter(PROCESS_DESC == input$process_desc),
x = ~DATE_ID, y = ~RECEIPTS,
type = 'scatter',
mode = 'markers',
color = ~WEEKEND,
colors = c("steelblue", "forestgreen"))
fig %>% layout(title = paste0('Receipt/Inventory Data for ', input$process_desc),
xaxis = list(title = "Date"),
yaxis = list (title = "Value"))
})
###### summary
holidays <- generated_holidays %>%
filter(country == 'US') %>%
select(holiday, ds)
holidays$ds <- as.Date(holidays$ds)
joined <- left_join(df, holidays, by = c("DATE_ID" = "ds"))
# output ---- analysis table
output$summary <- DT::renderDataTable({
summary <-  joined %>%
filter(PROCESS_DESC == input$process_desc) %>%
group_by(WEEKDAY) %>%
filter(is.na(holiday)) %>%
summarize(AVG = mean(RECEIPTS),
MED = median(RECEIPTS),
MIN = min(RECEIPTS),
MAX = max(RECEIPTS),
STD = sd(RECEIPTS),
COUNT = n()) %>%
arrange(match(WEEKDAY, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
DT::datatable({
summary},
rownames= FALSE)})
}
# Run the application
shinyApp(ui = ui, server = server)
library(stringr)
library(tidyverse)
library(odbc)
# qual_cxn <- dbConnect(
#   drv = odbc::odbc(),
#   driver = "SQL Server",
#   server = "SQLMODL15M1\\SQL_MODL15M1",
#   database = "mdb02q_datasci_qual",
#   uid = NULL,
#   pwd = NULL,
#   #port = 1433,
#   Trusted_Connection = TRUE
# )
infFile <- 'S:\\Corp\\CIS\\BI Support\\Data_Science\\COB_Survey_Optimization\\PRED_PROD_INFERENCE.csv'
infData <- data.frame(read.csv(infFile, header=TRUE))
infData$SBSB_ID <- as.character(infData$SBSB_ID)
fileNm <- 'S:\\Corp\\CIS\\BI Support\\Data_Science\\COB_Survey_Optimization\\DAM00098_COB.dat'
#fileNm <- '\\beps\\QualData\\DAM00098\\DAM00098_COB.dat'
rawData <- read.delim(file = fileNm, header = FALSE)
####### str to look for
processDt_pat <- '<processingDate>(.*?)</processingDate>'
printDt_pat <- '<printDate>(.*?)</printDate>'
sbId_pat <- '<customerID>(.*?)</customerID>'
numReq_pat <- '<numberOfRequests>(.*?)</numberOfRequests>'
parseFunc <- function(df, str, colName){
output <- data.frame(do.call(rbind,str_match_all(df$V1,str))[,2])
colnames(output) <- colName
return(output)
}
processDt <- parseFunc(rawData,processDt_pat, 'PROCESS_DT')
printDt <- parseFunc(rawData,printDt_pat, 'PRINT_DT')
sbId <- parseFunc(rawData,sbId_pat, 'SBSB_ID')
numReq <- parseFunc(rawData,numReq_pat, 'NUM_REQ')
finalDf <- bind_cols(processDt, printDt, sbId, numReq)
finalDf$PROCESS_DT <- as.Date(finalDf$PROCESS_DT)
finalDf$PRINT_DT <- as.Date(finalDf$PRINT_DT)
joinedDf <- left_join(finalDf, infData, by=c('SBSB_ID' = 'SBSB_ID'))
library(stringr)
library(tidyverse)
library(odbc)
# qual_cxn <- dbConnect(
#   drv = odbc::odbc(),
#   driver = "SQL Server",
#   server = "SQLMODL15M1\\SQL_MODL15M1",
#   database = "mdb02q_datasci_qual",
#   uid = NULL,
#   pwd = NULL,
#   #port = 1433,
#   Trusted_Connection = TRUE
# )
infFile <- 'S:\\Corp\\CIS\\BI Support\\Data_Science\\COB_Survey_Optimization\\PRED_PROD_INFERENCE.csv'
infData <- data.frame(read.csv(infFile, header=TRUE))
infData$SBSB_ID <- as.character(infData$SBSB_ID)
fileNm <- 'S:\\Corp\\CIS\\BI Support\\Data_Science\\COB_Survey_Optimization\\DAM00098_COB.dat'
#fileNm <- '\\beps\\QualData\\DAM00098\\DAM00098_COB.dat'
rawData <- read.delim(file = fileNm, header = FALSE)
####### str to look for
processDt_pat <- '<processingDate>(.*?)</processingDate>'
printDt_pat <- '<printDate>(.*?)</printDate>'
sbId_pat <- '<customerID>(.*?)</customerID>'
numReq_pat <- '<numberOfRequests>(.*?)</numberOfRequests>'
parseFunc <- function(df, str, colName){
output <- data.frame(do.call(rbind,str_match_all(df$V1,str))[,2])
colnames(output) <- colName
return(output)
}
processDt <- parseFunc(rawData,processDt_pat, 'PROCESS_DT')
printDt <- parseFunc(rawData,printDt_pat, 'PRINT_DT')
sbId <- parseFunc(rawData,sbId_pat, 'SBSB_ID')
numReq <- parseFunc(rawData,numReq_pat, 'NUM_REQ')
finalDf <- bind_cols(processDt, printDt, sbId, numReq)
finalDf$PROCESS_DT <- as.Date(finalDf$PROCESS_DT)
finalDf$PRINT_DT <- as.Date(finalDf$PRINT_DT)
joinedDf <- left_join(finalDf, infData, by=c('SBSB_ID' = 'SBSB_ID'))
View(joinedDf)
View(joinedDf %>% filter(!is.na(MODEL_KEY)))
library(shiny)
library(tidyverse)
library(odbc)
library(ggplot2)
library(plotly)
library(prophet)
library(DT)
adl_cxn <- dbConnect(
drv = odbc::odbc(),
driver = "SQL Server",
server = "SQLADL\\SQL_ADL",
uid = NULL,
pwd = NULL,
port = 1433,
Trusted_Connection = TRUE
)
##### base data
processDesc <- dbGetQuery(adl_cxn, 'SELECT * FROM workforce_adl.dbo.WFM_PROCESS_INFO')
baseData <- dbGetQuery(adl_cxn,
'SELECT * FROM workforce_adl.dbo.WFM_ACTUAL_DAILY_CNT WHERE CURRENT_IND = \'1\' AND PROCESS_ID <> \'0\'')
# formatting of base data
df <- inner_join(baseData, processDesc, by=c('PROCESS_ID'= 'PROCESS_ID')) %>%
mutate(RECEIPTS = ifelse(ACTUAL_VALUE < 0, 0, ACTUAL_VALUE),
WEEKDAY = weekdays(as.Date(DATE_ID)),
WEEKEND = ifelse(WEEKDAY == 'Saturday' | WEEKDAY == 'Sunday', 'Weekend','Weekday'),
frmtDt = as.Date(DATE_ID),
frmtPrcs = as.character(PROCESS_ID)) %>%
select(DATE_ID = frmtDt,
WEEKDAY,
WEEKEND,
PROCESS_ID = frmtPrcs,
PROCESS_DESC,
RECEIPTS) %>%
arrange(PROCESS_ID, DATE_ID)
##### pred results
factInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_FACT') %>%
select(MODEL_KEY, MODEL_ALG, NOTE)
metricInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_METRICS')
predInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_PREDICTIONS')
preds <- left_join(
left_join(df, predInfo, by=c('PROCESS_ID' = 'PROCESS_ID', 'DATE_ID' = 'ds')),
factInfo, by=c('MODEL_KEY' = 'MODEL_KEY')) %>%
mutate(MODEL_DESC = paste0(MODEL_ALG, ' - ', NOTE))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("WFM Receipt Data"),
selectInput(inputId = "process_desc",
label = "  Choose a Process:",
choices = unique(df$PROCESS_DESC),
selectize=FALSE,
width = '60%'),
br(),
#uiOutput("process_id"),
span(textOutput("process_id"), style="font-size:18px; color:blue"),
br(),
plotlyOutput(outputId = "distPlot"),
br(),
#dataTableOutput("summary"),
selectInput(inputId = "model",
label = "  Choose a Model:",
choices = unique(preds$MODEL_DESC),
selectize=FALSE,
width = '60%'),
br(),
plotlyOutput(outputId = "errorPlot")
)
################################# server
server <- function(input, output, ...) {
###### process id
output$process_id <- renderText( #renderUi
paste0('Process ID: ', toString(df %>%
filter(PROCESS_DESC == input$process_desc) %>%
select(PROCESS_ID) %>%
distinct())))
###### plot - errors
output$errorPlot <- renderPlotly({
errorData <- preds %>%
filter(PROCESS_DESC == input$process_desc & MODEL_DESC == input$model & !is.na(PREDICTED)) %>%
select(DATE_ID,PREDICTED, ACTUAL, ITERATION) %>%
gather(key, value, -DATE_ID, -ITERATION)
fig <- plot_ly(data = errorData,
x = ~DATE_ID, y = ~value,
type = 'scatter',
mode = 'lines',
color = ~key,
colors = c("black", "orange3"))
fig %>% layout(title = paste0("Errors for model: ", input$model),
xaxis = list(title = "Date"),
yaxis = list (title = "Value"))
})
###### plot - data
output$distPlot <- renderPlotly({
fig <- plot_ly(data = df %>% filter(PROCESS_DESC == input$process_desc),
x = ~DATE_ID, y = ~RECEIPTS,
type = 'scatter',
mode = 'markers',
color = ~WEEKEND,
colors = c("steelblue", "forestgreen"))
fig %>% layout(title = paste0('Receipt/Inventory Data for ', input$process_desc),
xaxis = list(title = "Date"),
yaxis = list (title = "Value"))
})
###### summary
holidays <- generated_holidays %>%
filter(country == 'US') %>%
select(holiday, ds)
holidays$ds <- as.Date(holidays$ds)
joined <- left_join(df, holidays, by = c("DATE_ID" = "ds"))
# output ---- analysis table
output$summary <- DT::renderDataTable({
summary <-  joined %>%
filter(PROCESS_DESC == input$process_desc) %>%
group_by(WEEKDAY) %>%
filter(is.na(holiday)) %>%
summarize(AVG = mean(RECEIPTS),
MED = median(RECEIPTS),
MIN = min(RECEIPTS),
MAX = max(RECEIPTS),
STD = sd(RECEIPTS),
COUNT = n()) %>%
arrange(match(WEEKDAY, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
DT::datatable({
summary},
rownames= FALSE)})
}
# Run the application
shinyApp(ui = ui, server = server)
View(metricInfo)
View(metricInfo %>% group_by(MODEL_KEY, PROCESS_ID) %>% summarize(AVG_MAE = mean(MAE), AVG_MASE = mean(MASE)))
# final
metrics <- inner_join(metricInfo, processDesc, by = c('PROCESS_ID' = 'PROCESS_ID'))
View(processDesc)
processDesc <- dbGetQuery(adl_cxn, 'SELECT PROCESS_ID, PROCESS_DESC FROM workforce_adl.dbo.WFM_PROCESS_INFO') %>%
mutate(prcs = as.character(PROCESS_ID)) %>%
select(PROCESS_ID = prcs,
PROCESS_DESC)
str(processDesc)
View(baseData)
baseData <- dbGetQuery(adl_cxn,'SELECT * FROM workforce_adl.dbo.WFM_ACTUAL_DAILY_CNT WHERE CURRENT_IND = \'1\' AND PROCESS_ID <> \'0\'') %>%
mutate(prcs = as.character(PROCESS_ID),
dt = as.Date(DATE_ID)) %>%
select(DATE_ID = dt,
PROCESS_ID = prcs,
ACTUAL_VALUE)
inner_join(baseData, processDesc, by=c('PROCESS_ID'= 'PROCESS_ID')) %>%
mutate(RECEIPTS = ifelse(ACTUAL_VALUE < 0, 0, ACTUAL_VALUE),
WEEKDAY = weekdays(as.Date(DATE_ID)),
WEEKEND = ifelse(WEEKDAY == 'Saturday' | WEEKDAY == 'Sunday', 'Weekend','Weekday')
)
df <- inner_join(baseData, processDesc, by=c('PROCESS_ID'= 'PROCESS_ID')) %>%
mutate(RECEIPTS = ifelse(ACTUAL_VALUE < 0, 0, ACTUAL_VALUE),
WEEKDAY = weekdays(as.Date(DATE_ID)),
WEEKEND = ifelse(WEEKDAY == 'Saturday' | WEEKDAY == 'Sunday', 'Weekend','Weekday'))
names(df)
df <- inner_join(baseData, processDesc, by=c('PROCESS_ID'= 'PROCESS_ID')) %>%
mutate(RECEIPTS = ifelse(ACTUAL_VALUE < 0, 0, ACTUAL_VALUE),
WEEKDAY = weekdays(as.Date(DATE_ID)),
WEEKEND = ifelse(WEEKDAY == 'Saturday' | WEEKDAY == 'Sunday', 'Weekend','Weekday')) %>%
select(DATE_ID, WEEKDAY, WEEKEND,PROCESS_ID, PROCESS_DESC, RECEIPTS) %>%
arrange(PROCESS_ID, DATE_ID)
View(df)
metrics <- inner_join(metricInfo, processDesc, by = c('PROCESS_ID' = 'PROCESS_ID'))
View(metrics)
nrow(metrics)
View(metrics)
View(metrics)
##### pred results
factInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_FACT') %>%
mutate(MODEL_DESC = paste0(MODEL_ALG, ' - ', NOTE)) %>%
select(MODEL_KEY, MODEL_ALG, NOTE, MODEL_DESC)
metricInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_METRICS')
predInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_PREDICTIONS')
# final preds with actual values
preds <- left_join(
left_join(df, predInfo, by=c('PROCESS_ID' = 'PROCESS_ID', 'DATE_ID' = 'ds')),
factInfo, by=c('MODEL_KEY' = 'MODEL_KEY'))
metrics <- inner_join(
inner_join(metricInfo, processDesc, by = c('PROCESS_ID' = 'PROCESS_ID')),
factInfo, by = c('MODEL_KEY' = 'MODEL_KEY'))
View(metrics)
library(shiny)
library(tidyverse)
library(odbc)
library(ggplot2)
library(plotly)
library(prophet)
library(DT)
adl_cxn <- dbConnect(
drv = odbc::odbc(),
driver = "SQL Server",
server = "SQLADL\\SQL_ADL",
uid = NULL,
pwd = NULL,
port = 1433,
Trusted_Connection = TRUE
)
##### base data
processDesc <- dbGetQuery(adl_cxn, 'SELECT PROCESS_ID, PROCESS_DESC FROM workforce_adl.dbo.WFM_PROCESS_INFO') %>%
mutate(prcs = as.character(PROCESS_ID)) %>%
select(PROCESS_ID = prcs,
PROCESS_DESC)
baseData <- dbGetQuery(adl_cxn,'SELECT * FROM workforce_adl.dbo.WFM_ACTUAL_DAILY_CNT WHERE CURRENT_IND = \'1\' AND PROCESS_ID <> \'0\'') %>%
mutate(prcs = as.character(PROCESS_ID),
dt = as.Date(DATE_ID)) %>%
select(DATE_ID = dt,
PROCESS_ID = prcs,
ACTUAL_VALUE)
# formatting of base data
df <- inner_join(baseData, processDesc, by=c('PROCESS_ID'= 'PROCESS_ID')) %>%
mutate(RECEIPTS = ifelse(ACTUAL_VALUE < 0, 0, ACTUAL_VALUE),
WEEKDAY = weekdays(as.Date(DATE_ID)),
WEEKEND = ifelse(WEEKDAY == 'Saturday' | WEEKDAY == 'Sunday', 'Weekend','Weekday')) %>%
select(DATE_ID, WEEKDAY, WEEKEND,PROCESS_ID, PROCESS_DESC, RECEIPTS) %>%
arrange(PROCESS_ID, DATE_ID)
##### pred results
factInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_FACT') %>%
mutate(MODEL_DESC = paste0(MODEL_ALG, ' - ', NOTE)) %>%
select(MODEL_KEY, MODEL_ALG, NOTE, MODEL_DESC)
metricInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_METRICS')
predInfo <- dbGetQuery(adl_cxn, 'SELECT * FROM datasci_adl.dbo.WFM_MODEL_PREDICTIONS')
# final preds with actual values
preds <- left_join(
left_join(df, predInfo, by=c('PROCESS_ID' = 'PROCESS_ID', 'DATE_ID' = 'ds')),
factInfo, by=c('MODEL_KEY' = 'MODEL_KEY'))
# final metrics
metrics <- inner_join(
inner_join(metricInfo, processDesc, by = c('PROCESS_ID' = 'PROCESS_ID')),
factInfo, by = c('MODEL_KEY' = 'MODEL_KEY'))
################################# ui
ui <- fluidPage(
# Application title
titlePanel("WFM Receipt Data"),
selectInput(inputId = "process_desc",
label = "  Choose a Process:",
choices = unique(df$PROCESS_DESC),
selectize=FALSE,
width = '60%'),
br(),
span(textOutput("process_id"), style="font-size:18px; color:blue"),
br(),
plotlyOutput(outputId = "distPlot"),
br(),
#dataTableOutput("summary"),
selectInput(inputId = "model",
label = "  Choose a Model:",
choices = unique(preds$MODEL_DESC),
selectize=FALSE,
width = '60%'),
br(),
plotlyOutput(outputId = "errorPlot")
)
################################# server
server <- function(input, output, ...) {
######output ---- process id
output$process_id <- renderText( #renderUi
paste0('Process ID: ', toString(df %>%
filter(PROCESS_DESC == input$process_desc) %>%
select(PROCESS_ID) %>%
distinct())))
output$errorInfo <- inner_join(metricInfo, ) %>%
filter(MODEL)
group_by(MODEL_KEY, PROCESS_ID) %>%
summarize(AVG_MAE = mean(MAE), AVG_MASE = mean(MASE))
###### output ---- plot: data
output$distPlot <- renderPlotly({
fig <- plot_ly(data = df %>% filter(PROCESS_DESC == input$process_desc),
x = ~DATE_ID, y = ~RECEIPTS,
type = 'scatter',
mode = 'markers',
color = ~WEEKEND,
colors = c("steelblue", "forestgreen"))
fig %>% layout(title = paste0('Receipt/Inventory Data for ', input$process_desc),
xaxis = list(title = "Date"),
yaxis = list (title = "Value"))
})
###### output ---- plot: errors
output$errorPlot <- renderPlotly({
errorData <- preds %>%
filter(PROCESS_DESC == input$process_desc & MODEL_DESC == input$model & !is.na(PREDICTED)) %>%
select(DATE_ID,PREDICTED, ACTUAL, ITERATION) %>%
gather(key, value, -DATE_ID, -ITERATION)
fig <- plot_ly(data = errorData,
x = ~DATE_ID, y = ~value,
type = 'scatter',
mode = 'lines',
color = ~key,
colors = c("black", "orange3"))
fig %>% layout(title = paste0("Errors for model: ", input$model),
xaxis = list(title = "Date"),
yaxis = list (title = "Value"))
})
# summary
holidays <- generated_holidays %>%
filter(country == 'US') %>%
select(holiday, ds)
holidays$ds <- as.Date(holidays$ds)
joined <- left_join(df, holidays, by = c("DATE_ID" = "ds"))
###### output ---- analysis table
output$summary <- DT::renderDataTable({
summary <-  joined %>%
filter(PROCESS_DESC == input$process_desc) %>%
group_by(WEEKDAY) %>%
filter(is.na(holiday)) %>%
summarize(AVG = mean(RECEIPTS),
MED = median(RECEIPTS),
MIN = min(RECEIPTS),
MAX = max(RECEIPTS),
STD = sd(RECEIPTS),
COUNT = n()) %>%
arrange(match(WEEKDAY, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
DT::datatable({
summary},
rownames= FALSE)})
}
#################################  Run the application
shinyApp(ui = ui, server = server)
setwd("S:/Corp/CIS/BI Support/Amber_Ferger/Training/DS_MS/DT621_Fall2020_Group2/HW1")
knitr::opts_chunk$set(echo = TRUE)
train_set <- read_csv('\data\moneyball-training-data.csv')
train_set <- read_csv('/data/moneyball-training-data.csv')
train_set <- read.csv('/data/moneyball-training-data.csv')
setwd("S:/Corp/CIS/BI Support/Amber_Ferger/Training/DS_MS/DT621_Fall2020_Group2/HW1")
train_set <- read.csv('data/moneyball-training-data.csv')
eval_set <- read.csv('data/moneyball-evaluation-data.csv')
colnames(train_set)
